#!/usr/bin/env python2

import sys


def run():
    import argparse
    from ssl_analyze.analyze import Analyzer
    from ssl_analyze.config import configure
    from ssl_analyze.report import make_report
    from ssl_analyze.log import log

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', default='ssl_analyze.yaml')
    parser.add_argument('-q', '--quiet', default=False, action='store_true')
    parser.add_argument('-H', '--host')
    parser.add_argument('-p', '--port', type=int, default=443)
    parser.add_argument('-r', '--report', default='')
    parser.add_argument('-o', '--output', default='')
    parser.add_argument('--CAdir')
    parser.add_argument('--CAfile')
    parser.add_argument('certificates', nargs='*')

    options = parser.parse_args()

    if options.quiet:
        log.quiet()

    configure(options.config)
    analyzer = Analyzer(options)
    results = []

    if options.host:
        results.append(analyzer.analyze_tcp((options.host, options.port)))

    for filename in options.certificates:
        log.info('Analyzing {}'.format(filename))
        results.append(analyzer.analyze_certificate(file(filename).read()))

    if options.report:
        for result in results:
            make_report(options.report, result, options)


if __name__ == '__main__':
    sys.exit(run())
